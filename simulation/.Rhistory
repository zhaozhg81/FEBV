if (is.na(packageDescription("Rmosek", fields = "Configured.MSK_BINDIR"))) {
stop(paste0("Failed to load default arguments from the package description, as requested by first input argument 'NA'."))
}
guess_mosek_version = guess_mosek_version_from_current_installation
guess_mosek_bindir = guess_mosek_bindir_from_current_installation
guess_mosek_headerdir = guess_mosek_headerdir_from_current_installation
guess_mosek_libname = guess_mosek_libname_from_current_installation
}
else {
if (!is.character(what_mosek_bindir)) {
stop(paste0("Unexpected input argument type '", typeof(what_mosek_bindir),
"'."))
}
else if (nchar(what_mosek_bindir) == 0) {
guess_mosek_version = guess_mosek_version_default
guess_mosek_bindir = guess_mosek_bindir_default
guess_mosek_headerdir = guess_mosek_headerdir_default
guess_mosek_libname = guess_mosek_libname_default
}
else {
mosekh = file.path(what_mosek_bindir, "..", "h",
"mosek.h")
if (!file.exists(mosekh)) {
stop(paste0("Failed to load default arguments from the unavailable file: '",
mosekh, "', as requested by first input argument '",
what_mosek_bindir, "'."))
}
guess_mosek_version = guess_mosek_version_from_mosek_bindir
guess_mosek_bindir = guess_mosek_bindir_from_mosek_bindir
guess_mosek_headerdir = guess_mosek_headerdir_from_mosek_bindir
guess_mosek_libname = guess_mosek_libname_from_mosek_bindir
}
}
install.rmosek <- function(pkgs = "Rmosek", repos = paste0("https://download.mosek.com/R/",
guess_mosek_version()), MSK_BINDIR = guess_mosek_bindir(),
MSK_HEADERDIR = guess_mosek_headerdir(), MSK_LIB = guess_mosek_libname(),
using_pkgbuild = is_windows(), using_sysenv = is_windows(),
type = "source", INSTALL_opts = "--no-multiarch", configure.vars = ifelse(using_sysenv,
"", paste0("MSK_BINDIR=", MSK_BINDIR, " ", "MSK_HEADERDIR=",
MSK_HEADERDIR, " ", "MSK_LIB=", MSK_LIB, " ",
"PKG_MOSEKHOME=", dirname(MSK_BINDIR), " ", "PKG_MOSEKLIB=",
MSK_LIB)), ...) {
if (using_sysenv) {
Sys.setenv(MSK_BINDIR = MSK_BINDIR)
Sys.setenv(MSK_HEADERDIR = MSK_HEADERDIR)
Sys.setenv(MSK_LIB = MSK_LIB)
Sys.setenv(PKG_MOSEKHOME = dirname(MSK_BINDIR))
Sys.setenv(PKG_MOSEKLIB = MSK_LIB)
}
if (!using_pkgbuild) {
install.packages(pkgs = pkgs, repos = repos, type = type,
INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}
else {
if (!requireNamespace("pkgbuild", quietly = TRUE)) {
windowsnote <- ifelse(is_windows(), " if you believe the package is unnecessary (e.g., to locate Rtools on your machine)",
"")
stop(paste0("Package 'pkgbuild' not available. Either install it by calling 'install.packages(\"pkgbuild\")' or add argument 'using_pkgbuild=FALSE' to this function call",
windowsnote, "."))
}
pkgbuild::with_build_tools({
install.packages(pkgs = pkgs, repos = repos,
type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}, debug = TRUE)
}
if (any(is.element(pkgs, loadedNamespaces()))) {
warning("Please restart the R session for changes to take effect.",
call. = FALSE)
}
}
update.rmosek <- function(oldPkgs = "Rmosek", repos = paste0("https://download.mosek.com/R/",
guess_mosek_version()), MSK_BINDIR = guess_mosek_bindir(),
MSK_HEADERDIR = guess_mosek_headerdir(), MSK_LIB = guess_mosek_libname(),
using_pkgbuild = is_windows(), using_sysenv = is_windows(),
type = "source", INSTALL_opts = "--no-multiarch", configure.vars = ifelse(using_sysenv,
"", paste0("MSK_BINDIR=", MSK_BINDIR, " ", "MSK_HEADERDIR=",
MSK_HEADERDIR, " ", "MSK_LIB=", MSK_LIB, " ",
"PKG_MOSEKHOME=", dirname(MSK_BINDIR), " ", "PKG_MOSEKLIB=",
MSK_LIB)), ...) {
if (using_sysenv) {
Sys.setenv(MSK_BINDIR = MSK_BINDIR)
Sys.setenv(MSK_HEADERDIR = MSK_HEADERDIR)
Sys.setenv(MSK_LIB = MSK_LIB)
Sys.setenv(PKG_MOSEKHOME = dirname(MSK_BINDIR))
Sys.setenv(PKG_MOSEKLIB = MSK_LIB)
}
if (!using_pkgbuild) {
update.packages(oldPkgs = oldPkgs, repos = repos,
type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}
else {
if (!requireNamespace("pkgbuild", quietly = TRUE)) {
windowsnote <- ifelse(is_windows(), " if you believe the package is unnecessary (e.g., to locate Rtools on your machine)",
"")
stop(paste0("Package 'pkgbuild' not available. Either install it by calling 'install.packages(\"pkgbuild\")' or add argument 'using_pkgbuild=FALSE' to this function call",
windowsnote, "."))
}
pkgbuild::with_build_tools({
update.packages(oldPkgs = oldPkgs, repos = repos,
type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}, debug = TRUE)
}
if (any(is.element(oldPkgs, loadedNamespaces()))) {
warning("Please restart the R session for changes to take effect.",
call. = FALSE)
}
}
remove.rmosek <- function(pkgs = "Rmosek", ...) {
remove.packages(pkgs = pkgs, ...)
}
builderenv <- new.env()
for (fn in c("install.rmosek", "update.rmosek")) {
f <- get(fn)
for (arg in c("repos", "MSK_BINDIR", "MSK_HEADERDIR",
"MSK_LIB", "using_pkgbuild", "using_sysenv")) {
if (!is.symbol(formals(f)[[arg]])) {
formals(f)[[arg]] <- eval(formals(f)[[arg]])
}
}
assign(fn, f, envir = builderenv)
}
for (fn in c("remove.rmosek")) {
f <- get(fn)
assign(fn, f, envir = builderenv)
}
r <- try({
detach(name, character.only = TRUE)
}, silent = TRUE)
if (!inherits(r, "try-error") && warn.conflicts) {
cat(paste0("NOTE: Overwriting the database '", name,
"' on the search path.\n"))
}
attach(builderenv, pos, name, warn.conflicts)
cat("\n    Functions now attached to the search path:\n      install.rmosek     - install Rmosek package.\n      update.rmosek      - update Rmosek package.\n      remove.rmosek      - remove Rmosek package.\n\n    The *.rmosek functions wrap the corresponding utils::*.packages functions\n    with the following default argument values:\n      pkgs           = ",
repr(formals(builderenv$install.rmosek)[["pkgs"]]), "\n      repos          = ",
repr(formals(builderenv$install.rmosek)[["repos"]]),
"\n\n    configuration variables:\n      MSK_BINDIR     = ",
repr(formals(builderenv$install.rmosek)[["MSK_BINDIR"]]),
"\n                        # if empty, autoconfigured from mosek executable on PATH.\n\n      MSK_HEADERDIR  = ",
repr(formals(builderenv$install.rmosek)[["MSK_HEADERDIR"]]),
"\n                        # if empty, autoconfigured from 'MSK_BINDIR'.\n\n      MSK_LIB        = ",
repr(formals(builderenv$install.rmosek)[["MSK_LIB"]]),
"\n                        # if empty, autoconfigured from 'MSK_BINDIR'.\n\n    and installation styles:\n      using_pkgbuild = ",
repr(formals(builderenv$install.rmosek)[["using_pkgbuild"]]),
"\n                        # whether to execute in the 'pkgbuild' environment\n                        # as is recommended on Windows to resolve Rtools.\n                        \n      using_sysenv   = ",
repr(formals(builderenv$install.rmosek)[["using_sysenv"]]),
"\n                        # whether to transmit configuration variables via Sys.setenv()\n                        # as opposed to configure.vars.\n\n    See, e.g., `show(install.rmosek)` for its implementation.\n\n",
sep = "")
}
#<bytecode: 0x114e874e0>
#<environment: 0x114e51c28>
function (what_mosek_bindir, pos = 2L, name = "Rmosek:builder",
warn.conflicts = TRUE)
{
is_windows <- function() {
(.Platform$OS.type == "windows")
}
guess_mosek_version_default <- function() {
"<MOSEKMAJORVER>.<MOSEKMINORVER>"
}
guess_mosek_bindir_default <- function() {
""
}
guess_mosek_headerdir_default <- function() {
""
}
guess_mosek_libname_default <- function() {
""
}
guess_mosek_version_from_current_installation <- function(silent = FALSE) {
out <- guess_mosek_version_default()
tryCatch({
guess <- packageDescription("Rmosek", fields = "Configured.MSK_VERSION")
tryCatch(stopifnot(!is.na(guess)), error = function(e) stop("Could not identify MOSEK version from current installation.",
call. = FALSE))
out <- guess
}, error = function(e) if (!silent) {
warning(e)
})
out
}
guess_mosek_bindir_from_current_installation <- function(silent = FALSE) {
out <- guess_mosek_bindir_default()
tryCatch({
guess <- packageDescription("Rmosek", fields = "Configured.MSK_BINDIR")
tryCatch(stopifnot(!is.na(guess), file.exists(guess)),
error = function(e) stop("Could not identify MOSEK 'bin' directory from current installation.",
call. = FALSE))
out <- normalizePath(guess)
}, error = function(e) if (!silent) {
warning(e)
})
out
}
guess_mosek_headerdir_from_current_installation <- function(silent = FALSE) {
out <- guess_mosek_headerdir_default()
tryCatch({
guess <- packageDescription("Rmosek", fields = "Configured.MSK_HEADERDIR")
tryCatch(stopifnot(!is.na(guess), file.exists(guess)),
error = function(e) stop("Could not identify MOSEK 'h' directory from current installation.",
call. = FALSE))
out <- normalizePath(guess)
}, error = function(e) if (!silent) {
warning(e)
})
out
}
guess_mosek_libname_from_current_installation <- function(silent = FALSE) {
out <- guess_mosek_libname_default()
tryCatch({
arch <- R.Version()$arch
archinfo <- list(i386 = "", x86_64 = "64")[[arch]]
versioninfo <- ifelse(is_windows(), guess_mosek_version_from_current_installation(silent = TRUE),
"")
versioninfo <- sub("\\.", "_", versioninfo)
tryCatch(stopifnot(!is.null(archinfo)), error = function(e) stop(paste0("Could not identify MOSEK library name from current installation (arch=",
arch, " was unknown)."), call. = FALSE))
tryCatch(stopifnot(!is_windows() || nchar(versioninfo) >=
1), error = function(e) stop("Could not identify MOSEK library name from current installation.",
call. = FALSE))
postfixlist <- list(archinfo, versioninfo)
postfix <- paste(postfixlist[lapply(postfixlist,
nchar) >= 1], collapse = "_")
out <- paste0("mosek", postfix)
}, error = function(e) if (!silent) {
warning(e)
})
out
}
guess_mosek_version_from_mosek_bindir <- function(silent = FALSE) {
out <- guess_mosek_version_default()
tryCatch({
mosekh <- readLines(file.path(what_mosek_bindir,
"..", "h", "mosek.h"))
major <- sub("[^0-9]*", "", grep("MSK_VERSION_MAJOR",
mosekh, value = TRUE))
minor <- sub("[^0-9]*", "", grep("MSK_VERSION_MINOR",
mosekh, value = TRUE))
guess <- paste0(major, ".", minor)
out <- guess
}, error = function(e) if (!silent) {
warning(e)
})
out
}
guess_mosek_bindir_from_mosek_bindir <- function(silent = FALSE) {
out <- guess_mosek_bindir_default()
tryCatch({
guess <- what_mosek_bindir
tryCatch(stopifnot(!is.na(guess), file.exists(guess)),
error = function(e) stop("Could not identify MOSEK 'bin' directory from argument 'what_mosek_bindir'.",
call. = FALSE))
out <- normalizePath(guess)
}, error = function(e) if (!silent) {
warning(e)
})
out
}
guess_mosek_headerdir_from_mosek_bindir <- function(silent = FALSE) {
out <- guess_mosek_headerdir_default()
tryCatch({
guess <- file.path(what_mosek_bindir, "..", "h")
tryCatch(stopifnot(!is.na(guess), file.exists(guess)),
error = function(e) stop("Could not identify MOSEK 'h' directory from argument 'what_mosek_bindir'.",
call. = FALSE))
out <- normalizePath(guess)
}, error = function(e) if (!silent) {
warning(e)
})
out
}
guess_mosek_libname_from_mosek_bindir <- function(silent = FALSE) {
out <- guess_mosek_libname_default()
tryCatch({
arch <- R.Version()$arch
archinfo <- list(i386 = "", x86_64 = "64")[[arch]]
versioninfo <- ifelse(is_windows(), guess_mosek_version_from_mosek_bindir(silent = TRUE),
"")
versioninfo <- sub("\\.", "_", versioninfo)
tryCatch(stopifnot(!is.null(archinfo)), error = function(e) stop(paste0("Could not identify MOSEK library name from argument 'what_mosek_bindir' (arch=",
arch, " was unknown)."), call. = FALSE))
tryCatch(stopifnot(!is_windows() || nchar(versioninfo) >=
1), error = function(e) stop("Could not identify MOSEK library name from argument 'what_mosek_bindir'.",
call. = FALSE))
postfixlist <- list(archinfo, versioninfo)
postfix <- paste(postfixlist[lapply(postfixlist,
nchar) >= 1], collapse = "_")
out <- paste0("mosek", postfix)
}, error = function(e) if (!silent) {
warning(e)
})
out
}
if (is.na(what_mosek_bindir)) {
if (is.na(packageDescription("Rmosek", fields = "Configured.MSK_BINDIR"))) {
stop(paste0("Failed to load default arguments from the package description, as requested by first input argument 'NA'."))
}
guess_mosek_version = guess_mosek_version_from_current_installation
guess_mosek_bindir = guess_mosek_bindir_from_current_installation
guess_mosek_headerdir = guess_mosek_headerdir_from_current_installation
guess_mosek_libname = guess_mosek_libname_from_current_installation
}
else {
if (!is.character(what_mosek_bindir)) {
stop(paste0("Unexpected input argument type '", typeof(what_mosek_bindir),
"'."))
}
else if (nchar(what_mosek_bindir) == 0) {
guess_mosek_version = guess_mosek_version_default
guess_mosek_bindir = guess_mosek_bindir_default
guess_mosek_headerdir = guess_mosek_headerdir_default
guess_mosek_libname = guess_mosek_libname_default
}
else {
mosekh = file.path(what_mosek_bindir, "..", "h",
"mosek.h")
if (!file.exists(mosekh)) {
stop(paste0("Failed to load default arguments from the unavailable file: '",
mosekh, "', as requested by first input argument '",
what_mosek_bindir, "'."))
}
guess_mosek_version = guess_mosek_version_from_mosek_bindir
guess_mosek_bindir = guess_mosek_bindir_from_mosek_bindir
guess_mosek_headerdir = guess_mosek_headerdir_from_mosek_bindir
guess_mosek_libname = guess_mosek_libname_from_mosek_bindir
}
}
install.rmosek <- function(pkgs = "Rmosek", repos = paste0("https://download.mosek.com/R/",
guess_mosek_version()), MSK_BINDIR = guess_mosek_bindir(),
MSK_HEADERDIR = guess_mosek_headerdir(), MSK_LIB = guess_mosek_libname(),
using_pkgbuild = is_windows(), using_sysenv = is_windows(),
type = "source", INSTALL_opts = "--no-multiarch", configure.vars = ifelse(using_sysenv,
"", paste0("MSK_BINDIR=", MSK_BINDIR, " ", "MSK_HEADERDIR=",
MSK_HEADERDIR, " ", "MSK_LIB=", MSK_LIB, " ",
"PKG_MOSEKHOME=", dirname(MSK_BINDIR), " ", "PKG_MOSEKLIB=",
MSK_LIB)), ...) {
if (using_sysenv) {
Sys.setenv(MSK_BINDIR = MSK_BINDIR)
Sys.setenv(MSK_HEADERDIR = MSK_HEADERDIR)
Sys.setenv(MSK_LIB = MSK_LIB)
Sys.setenv(PKG_MOSEKHOME = dirname(MSK_BINDIR))
Sys.setenv(PKG_MOSEKLIB = MSK_LIB)
}
if (!using_pkgbuild) {
install.packages(pkgs = pkgs, repos = repos, type = type,
INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}
else {
if (!requireNamespace("pkgbuild", quietly = TRUE)) {
windowsnote <- ifelse(is_windows(), " if you believe the package is unnecessary (e.g., to locate Rtools on your machine)",
"")
stop(paste0("Package 'pkgbuild' not available. Either install it by calling 'install.packages(\"pkgbuild\")' or add argument 'using_pkgbuild=FALSE' to this function call",
windowsnote, "."))
}
pkgbuild::with_build_tools({
install.packages(pkgs = pkgs, repos = repos,
type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}, debug = TRUE)
}
if (any(is.element(pkgs, loadedNamespaces()))) {
warning("Please restart the R session for changes to take effect.",
call. = FALSE)
}
}
update.rmosek <- function(oldPkgs = "Rmosek", repos = paste0("https://download.mosek.com/R/",
guess_mosek_version()), MSK_BINDIR = guess_mosek_bindir(),
MSK_HEADERDIR = guess_mosek_headerdir(), MSK_LIB = guess_mosek_libname(),
using_pkgbuild = is_windows(), using_sysenv = is_windows(),
type = "source", INSTALL_opts = "--no-multiarch", configure.vars = ifelse(using_sysenv,
"", paste0("MSK_BINDIR=", MSK_BINDIR, " ", "MSK_HEADERDIR=",
MSK_HEADERDIR, " ", "MSK_LIB=", MSK_LIB, " ",
"PKG_MOSEKHOME=", dirname(MSK_BINDIR), " ", "PKG_MOSEKLIB=",
MSK_LIB)), ...) {
if (using_sysenv) {
Sys.setenv(MSK_BINDIR = MSK_BINDIR)
Sys.setenv(MSK_HEADERDIR = MSK_HEADERDIR)
Sys.setenv(MSK_LIB = MSK_LIB)
Sys.setenv(PKG_MOSEKHOME = dirname(MSK_BINDIR))
Sys.setenv(PKG_MOSEKLIB = MSK_LIB)
}
if (!using_pkgbuild) {
update.packages(oldPkgs = oldPkgs, repos = repos,
type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}
else {
if (!requireNamespace("pkgbuild", quietly = TRUE)) {
windowsnote <- ifelse(is_windows(), " if you believe the package is unnecessary (e.g., to locate Rtools on your machine)",
"")
stop(paste0("Package 'pkgbuild' not available. Either install it by calling 'install.packages(\"pkgbuild\")' or add argument 'using_pkgbuild=FALSE' to this function call",
windowsnote, "."))
}
pkgbuild::with_build_tools({
update.packages(oldPkgs = oldPkgs, repos = repos,
type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}, debug = TRUE)
}
if (any(is.element(oldPkgs, loadedNamespaces()))) {
warning("Please restart the R session for changes to take effect.",
call. = FALSE)
}
}
remove.rmosek <- function(pkgs = "Rmosek", ...) {
remove.packages(pkgs = pkgs, ...)
}
builderenv <- new.env()
for (fn in c("install.rmosek", "update.rmosek")) {
f <- get(fn)
for (arg in c("repos", "MSK_BINDIR", "MSK_HEADERDIR",
"MSK_LIB", "using_pkgbuild", "using_sysenv")) {
if (!is.symbol(formals(f)[[arg]])) {
formals(f)[[arg]] <- eval(formals(f)[[arg]])
}
}
assign(fn, f, envir = builderenv)
}
for (fn in c("remove.rmosek")) {
f <- get(fn)
assign(fn, f, envir = builderenv)
}
r <- try({
detach(name, character.only = TRUE)
}, silent = TRUE)
if (!inherits(r, "try-error") && warn.conflicts) {
cat(paste0("NOTE: Overwriting the database '", name,
"' on the search path.\n"))
}
attach(builderenv, pos, name, warn.conflicts)
cat("\n    Functions now attached to the search path:\n      install.rmosek     - install Rmosek package.\n      update.rmosek      - update Rmosek package.\n      remove.rmosek      - remove Rmosek package.\n\n    The *.rmosek functions wrap the corresponding utils::*.packages functions\n    with the following default argument values:\n      pkgs           = ",
repr(formals(builderenv$install.rmosek)[["pkgs"]]), "\n      repos          = ",
repr(formals(builderenv$install.rmosek)[["repos"]]),
"\n\n    configuration variables:\n      MSK_BINDIR     = ",
repr(formals(builderenv$install.rmosek)[["MSK_BINDIR"]]),
"\n                        # if empty, autoconfigured from mosek executable on PATH.\n\n      MSK_HEADERDIR  = ",
repr(formals(builderenv$install.rmosek)[["MSK_HEADERDIR"]]),
"\n                        # if empty, autoconfigured from 'MSK_BINDIR'.\n\n      MSK_LIB        = ",
repr(formals(builderenv$install.rmosek)[["MSK_LIB"]]),
"\n                        # if empty, autoconfigured from 'MSK_BINDIR'.\n\n    and installation styles:\n      using_pkgbuild = ",
repr(formals(builderenv$install.rmosek)[["using_pkgbuild"]]),
"\n                        # whether to execute in the 'pkgbuild' environment\n                        # as is recommended on Windows to resolve Rtools.\n                        \n      using_sysenv   = ",
repr(formals(builderenv$install.rmosek)[["using_sysenv"]]),
"\n                        # whether to transmit configuration variables via Sys.setenv()\n                        # as opposed to configure.vars.\n\n    See, e.g., `show(install.rmosek)` for its implementation.\n\n",
sep = "")
}
#<bytecode: 0x114e874e0>
#<environment: 0x114e51c28>
#Maximum Likelihood Estimation of a Log-Concave Density
set.seed(1968)
x <- rgamma(50,10)
m <- medde(x, v = 50, lambda = -.5, verb = 5)
GVmix(sSq, 5, v = 300)
GVmix(sSq, 5, 300)
sSq
rep(5,G)
rep(5,G)
G
G=length(sSq)
GVmix(sSq, rep(5,G), 300)
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch", repos="http://download.mosek.com/R/8")
install.packages("Rmosek", type = "source", INSTALL_opts = "--no-multiarch", repos = "http://download.mosek.com/R/8")
export PKG_MOSEKHOME=/home/username/bin/mosek/8/tools/platform/linux64x86 export PKG_MOSEKLIB=mosek64
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch", repos="http://download.mosek.com/R/8")
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch")
library(Matrix)
library(REBayes)
rstep <- function(n){
x <- sort(rnorm(n))
y <- runif(n)
y <- c(0,cumsum(y/sum(y)))
stepfun(x,y)
}
F <- rstep(20)
G <- rstep(10)
S <- L1norm(F,G)
plot(F,main = paste("||F - G|| = ", round(S,4)))
lines(G,col = 2)
#Maximum Likelihood Estimation of a Log-Concave Density
set.seed(1968)
x <- rgamma(50,10)
m <- medde(x, v = 50, lambda = -.5, verb = 5)
plot(m, type = "l", xlab = "x", ylab = "f(x)")
lines(m$x,dgamma(m$x,10),col = 2)
title("Log-concave Constraint")
## End(Not run)
## Not run:
#Maximum Likelihood Estimation of a Gamma Density with TV constraint
set.seed(1968)
x <- rgamma(50,5)
f <- medde(x, v = 50, lambda = 0.2, verb = 5)
plot(f, type = "l", xlab = "x", ylab = "f(x)")
lines(f$x,dgamma(f$x,5),col = 2)
legend(10,.15,c("ghat","true"),lty = 1, col = 1:2)
title("Total Variation Norm Constraint")
GVmix(sSq, rep(5,G), 300)
rep(5,G)
G=length(sSq)
GVmix(sSq, rep(5,G), 300)
mosek_attachbuilder("/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin"")
)))
efgrdhfmgfndhfgxnf
DSfsad
vas)""
mosek_attachbuilder("/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin")
Rmosek::mosek_attachbuilder("/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin")
install.rmosek()
