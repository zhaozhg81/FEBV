source("../F_Indep_Core.R")
#-- Saving RData -------------------------------------------------------------------------------------------------------------------
path      <- paste("./Data/")
path1     <- paste("./Figure/")
settname  <- paste("Indep_prior_",prior,"_df_",df,"_a_",a,"_b_",b,sep="")
filename  <- paste(path, settname, ".Rdata", sep="")
save(Result.unknown, file = filename)
#-- Saving Figures -----------------------------------------------------------------------------------------------------------------
source("../F_SavingFigures_CI_Indep.R")
#-----------------------------------------------------------------------------------------------------------------------------------
Llim=min(Result.unknown[,2],Result.unknown[,10],Result.unknown[,14],Result.unknown[,18],Result.unknown[,22])-0.1
plot( Result.unknown[,1],Result.unknown[,2],xlab="M",ylab="Coverage Prob", ylim=c(0,1), xlim=c(0,1),col="white",main=bquote(paste("[Coverage Prob.]   ",.(PRIOR), "    a=",.(a),",  b=",.(b),",  df=",.(df) )), cex.lab=1.3, cex.axis=1.3, cex.main=1.5)
lines( Result.unknown[,1],rep(0.95-qnorm(0.975)*sqrt(0.05*0.95/1000),N), type="b", col="black",lwd=3,lty=2)
lines( Result.unknown[,1],Result.unknown[,2] , pch=3 , type="b", col="cyan3" ) # Bonferroni
Llim=min(Result.unknown[,2],Result.unknown[,10],Result.unknown[,14],Result.unknown[,18],Result.unknown[,22])-0.1
plot( Result.unknown[,1],Result.unknown[,2],xlab="M",ylab="Coverage Prob", ylim=c(0,1), xlim=c(0,1),col="white",main=bquote(paste("[Coverage Prob.]   ",.(PRIOR), ",  df=",.(df) )), cex.lab=1.3, cex.axis=1.3, cex.main=1.5)
lines( Result.unknown[,1],rep(0.95-qnorm(0.975)*sqrt(0.05*0.95/1000),N), type="b", col="black",lwd=3,lty=2)
lines( Result.unknown[,1],Result.unknown[,2] , pch=3 , type="b", col="cyan3" ) # Bonferroni
lines( Result.unknown[,1],Result.unknown[,10], pch=15, type="b", col="blue"  ) # ELJS
lines( Result.unknown[,1],Result.unknown[,14], pch=7 , type="b", col="purple") # TW
lines( Result.unknown[,1],Result.unknown[,18], pch=17, type="b", col="green4") # Smyth
lines( Result.unknown[,1],Result.unknown[,22], pch=16, type="b", col="gold4" ) # Vash
lines( Result.unknown[,1],Result.unknown[,26], pch=9 , type="b", col="brown" ) # fEBV
lines( Result.unknown[,1],Result.unknown[,30], pch=8 , type="b", col="orange") # fEBVS
lines( Result.unknown[,1],Result.unknown[,34], pch=19, type="b", col="red"   ) # FEBV
lines( Result.unknown[,1],Result.unknown[,38], pch=10, type="b", col="green ") # SOC
legend("bottomright",horiz=F, legend=c("Error Bar","Bonferroni","ELJS","TW","Smyth","Vash","f-EBV","f-EBVS","F-EBV"),col=c("black","cyan3","blue","purple","green4","gold4", "brown","orange","red","SOC"),pch=c(NA,3,15,7,17,16,9,8,19,10), ncol=1, lty=1:1, cex=1.3)
Llim=min(Result.unknown[,2],Result.unknown[,10],Result.unknown[,14],Result.unknown[,18],Result.unknown[,22])-0.1
plot( Result.unknown[,1],Result.unknown[,2],xlab="M",ylab="Coverage Prob", ylim=c(0,1), xlim=c(0,1),col="white",main=bquote(paste("[Coverage Prob.]   ",.(PRIOR), ",  df=",.(df) )), cex.lab=1.3, cex.axis=1.3, cex.main=1.5)
lines( Result.unknown[,1],rep(0.95-qnorm(0.975)*sqrt(0.05*0.95/1000),N), type="b", col="black",lwd=3,lty=2)
lines( Result.unknown[,1],Result.unknown[,2] , pch=3 , type="b", col="cyan3" ) # Bonferroni
lines( Result.unknown[,1],Result.unknown[,10], pch=15, type="b", col="blue"  ) # ELJS
lines( Result.unknown[,1],Result.unknown[,14], pch=7 , type="b", col="purple") # TW
lines( Result.unknown[,1],Result.unknown[,18], pch=17, type="b", col="green4") # Smyth
lines( Result.unknown[,1],Result.unknown[,22], pch=16, type="b", col="gold4" ) # Vash
lines( Result.unknown[,1],Result.unknown[,26], pch=9 , type="b", col="brown" ) # fEBV
lines( Result.unknown[,1],Result.unknown[,30], pch=8 , type="b", col="orange") # fEBVS
lines( Result.unknown[,1],Result.unknown[,34], pch=19, type="b", col="red"   ) # FEBV
lines( Result.unknown[,1],Result.unknown[,38], pch=10, type="b", col="green ") # SOC
legend("bottomright",horiz=F, legend=c("Error Bar","Bonferroni","ELJS","TW","Smyth","Vash","f-EBV","f-EBVS","F-EBV"),col=c("black","cyan3","blue","purple","green4","gold4", "brown","orange","red","SOC"),pch=c(NA,3,15,7,17,16,9,8,19,10), ncol=1, lty=1:1, cex=1.3)
Llim=min(Result.unknown[,2],Result.unknown[,10],Result.unknown[,14],Result.unknown[,18],Result.unknown[,22])-0.1
Result.unknown
#-- Setting Parameters -------------------------------------------------------------------------------------------------------------
prior   <- 5      # Prior:  1=IG, 2=Lognormal, 3=Gamma, 4=IGMix, 5=GamMix
a       <- 0
b       <- 0
source("../F_Functions.R")
source("../F_Indep_Core.R")
#-- Saving RData -------------------------------------------------------------------------------------------------------------------
path      <- paste("./Data/")
path1     <- paste("./Figure/")
settname  <- paste("Indep_prior_",prior,"_df_",df,"_a_",a,"_b_",b,sep="")
filename  <- paste(path, settname, ".Rdata", sep="")
save(Result.unknown, file = filename)
#-- Saving Figures -----------------------------------------------------------------------------------------------------------------
source("../F_SavingFigures_CI_Indep.R")
#-----------------------------------------------------------------------------------------------------------------------------------
#-- Setting Parameters -------------------------------------------------------------------------------------------------------------
prior   <- 5      # Prior:  1=IG, 2=Lognormal, 3=Gamma, 4=IGMix, 5=GamMix
a       <- 9
b       <- 9
source("../F_Functions.R")
source("../F_Indep_Core.R")
#-- Saving RData -------------------------------------------------------------------------------------------------------------------
path      <- paste("./Data/")
path1     <- paste("./Figure/")
settname  <- paste("Indep_prior_",prior,"_df_",df,"_a_",a,"_b_",b,sep="")
filename  <- paste(path, settname, ".Rdata", sep="")
save(Result.unknown, file = filename)
#-- Saving Figures -----------------------------------------------------------------------------------------------------------------
source("../F_SavingFigures_CI_Indep.R")
#-----------------------------------------------------------------------------------------------------------------------------------
source("../F_SavingFigures_CI_Indep.R_45")
source("../F_SavingFigures_CI_Indep_45.R")
dev.off()
Llim=min(Result.unknown[,2],Result.unknown[,10],Result.unknown[,14],Result.unknown[,18],Result.unknown[,22])-0.1
plot( Result.unknown[,1],Result.unknown[,2],xlab="M",ylab="Coverage Prob", ylim=c(0,1), xlim=c(0,1),col="white",main=bquote(paste("[Coverage Prob.]   ",.(PRIOR), ",  df=",.(df) )), cex.lab=1.3, cex.axis=1.3, cex.main=1.5)
lines( Result.unknown[,1],rep(0.95-qnorm(0.975)*sqrt(0.05*0.95/1000),N), type="b", col="black",lwd=3,lty=2)
lines( Result.unknown[,1],Result.unknown[,2] , pch=3 , type="b", col="cyan3" ) # Bonferroni
lines( Result.unknown[,1],Result.unknown[,10], pch=15, type="b", col="blue"  ) # ELJS
lines( Result.unknown[,1],Result.unknown[,14], pch=7 , type="b", col="purple") # TW
lines( Result.unknown[,1],Result.unknown[,18], pch=17, type="b", col="green4") # Smyth
lines( Result.unknown[,1],Result.unknown[,22], pch=16, type="b", col="gold4" ) # Vash
lines( Result.unknown[,1],Result.unknown[,26], pch=9 , type="b", col="brown" ) # fEBV
lines( Result.unknown[,1],Result.unknown[,30], pch=8 , type="b", col="orange") # fEBVS
lines( Result.unknown[,1],Result.unknown[,34], pch=19, type="b", col="red"   ) # FEBV
lines( Result.unknown[,1],Result.unknown[,38], pch=10, type="b", col="green ") # SOC
legend("bottomright",horiz=F, legend=c("Error Bar","Bonferroni","ELJS","TW","Smyth","Vash","f-EBV","f-EBVS","F-EBV"),col=c("black","cyan3","blue","purple","green4","gold4", "brown","orange","red","SOC"),pch=c(NA,3,15,7,17,16,9,8,19,10), ncol=1, lty=1:1, cex=1.3)
Llim=min(Result.unknown[,2],Result.unknown[,10],Result.unknown[,14],Result.unknown[,18],Result.unknown[,22])-0.1
plot( Result.unknown[,1],Result.unknown[,2],xlab="M",ylab="Coverage Prob", ylim=c(0,1), xlim=c(0,1),col="white",main=bquote(paste("[Coverage Prob.]   ",.(PRIOR), ",  df=",.(df) )), cex.lab=1.3, cex.axis=1.3, cex.main=1.5)
sSq
GVmix(sSq, 5, v = 300)
library(Matrix)
library(REBayes)
sSq
GVmix(sSq, 5, v = 300)
G
GVmix(sSq, rep(5,G), v = 300)
mosek_attachbuilder("/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin")
Rmosek::mosek_attachbuilder("/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin")
install.rmosek
install.rmosek()
install.packages(REBayes)
install.packages("REBayes")
install.packages("REBayes")
uninstall.packages("REBayes")
uninstall.packages("REBayes")
remove.packages("REBayes")
remove.packages("Rmosek")
remove.packages("Mosek")
library(REBayes)
library(Matrix)
library(REBayes)
Rmosek::mosek_attachbuilder("/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin")
show(install.rmosek)
function (pkgs = "Rmosek", repos = "https://download.mosek.com/R/9.2",
MSK_BINDIR = "/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin",
MSK_HEADERDIR = "/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/h",
MSK_LIB = "mosek64", using_pkgbuild = FALSE, using_sysenv = FALSE,
type = "source", INSTALL_opts = "--no-multiarch", configure.vars = ifelse(using_sysenv,
"", paste0("MSK_BINDIR=", MSK_BINDIR, " ", "MSK_HEADERDIR=",
MSK_HEADERDIR, " ", "MSK_LIB=", MSK_LIB, " ", "PKG_MOSEKHOME=",
dirname(MSK_BINDIR), " ", "PKG_MOSEKLIB=", MSK_LIB)),
...)
_
\
function (pkgs = "Rmosek", repos = "https://download.mosek.com/R/9.2",
MSK_BINDIR = "/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin",
MSK_HEADERDIR = "/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/h",
MSK_LIB = "mosek64", using_pkgbuild = FALSE, using_sysenv = FALSE,
type = "source", INSTALL_opts = "--no-multiarch", configure.vars = ifelse(using_sysenv,
"", paste0("MSK_BINDIR=", MSK_BINDIR, " ", "MSK_HEADERDIR=",
MSK_HEADERDIR, " ", "MSK_LIB=", MSK_LIB, " ", "PKG_MOSEKHOME=",
dirname(MSK_BINDIR), " ", "PKG_MOSEKLIB=", MSK_LIB)))
)
function (pkgs = "Rmosek", repos = "https://download.mosek.com/R/9.2",
MSK_BINDIR = "/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin",
MSK_HEADERDIR = "/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/h",
MSK_LIB = "mosek64", using_pkgbuild = FALSE, using_sysenv = FALSE,
type = "source", INSTALL_opts = "--no-multiarch", configure.vars = ifelse(using_sysenv,
"", paste0("MSK_BINDIR=", MSK_BINDIR, " ", "MSK_HEADERDIR=",
MSK_HEADERDIR, " ", "MSK_LIB=", MSK_LIB, " ", "PKG_MOSEKHOME=",
dirname(MSK_BINDIR), " ", "PKG_MOSEKLIB=", MSK_LIB,...)))
-pol
function (pkgs = "Rmosek", repos = "https://download.mosek.com/R/9.2",
MSK_BINDIR = "/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin",
MSK_HEADERDIR = "/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/h",
MSK_LIB = "mosek64", using_pkgbuild = FALSE, using_sysenv = FALSE,
type = "source", INSTALL_opts = "--no-multiarch", configure.vars = ifelse(using_sysenv,
"", paste0("MSK_BINDIR=", MSK_BINDIR, " ", "MSK_HEADERDIR=",
MSK_HEADERDIR, " ", "MSK_LIB=", MSK_LIB, " ", "PKG_MOSEKHOME=",
dirname(MSK_BINDIR), " ", "PKG_MOSEKLIB=", MSK_LIB)),
...)
{
if (using_sysenv) {
Sys.setenv(MSK_BINDIR = MSK_BINDIR)
Sys.setenv(MSK_HEADERDIR = MSK_HEADERDIR)
Sys.setenv(MSK_LIB = MSK_LIB)
Sys.setenv(PKG_MOSEKHOME = dirname(MSK_BINDIR))
Sys.setenv(PKG_MOSEKLIB = MSK_LIB)
}
if (!using_pkgbuild) {
install.packages(pkgs = pkgs, repos = repos, type = type,
INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}
else {
if (!requireNamespace("pkgbuild", quietly = TRUE)) {
windowsnote <- ifelse(is_windows(), " if you believe the package is unnecessary (e.g., to locate Rtools on your machine)",
"")
stop(paste0("Package 'pkgbuild' not available. Either install it by calling 'install.packages(\"pkgbuild\")' or add argument 'using_pkgbuild=FALSE' to this function call",
windowsnote, "."))
}
pkgbuild::with_build_tools({
install.packages(pkgs = pkgs, repos = repos, type = type,
INSTALL_opts = INSTALL_opts, configure.vars = configure.vars,
...)
}, debug = TRUE)
}
if (any(is.element(pkgs, loadedNamespaces()))) {
warning("Please restart the R session for changes to take effect.",
call. = FALSE)
}
}
install.rmosek()
remove.packages("Rmosek")
Rmosek::mosek_attachbuilder("/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin")
/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin
Rmosek::mosek_attachbuilder("/Users/ykwon1/Downloads/mosek/9.2/tools/platform/osx64x86/bin")
install.rmosek()
library(BiocManager)
library(remotes)
library(devtools)
install.packages("BiocManager", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("remotes", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("devtools", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("devtools", lib = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("devtools", lib = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("devtools", lib = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
source("Concordance_Colon.R")
setwd("/Users/ykwon1/Dropbox/Yeil/Journal/Biometrika FEBV codes/for_github/realdata")
source("Concordance_Colon.R")
concordance_colon(numSim=1, PLOT=FALSE, bw='ucv')
CVF <-function(cvid, X_train_tumor, X_train_normal, X_valid_tumor, X_valid_normal, bw="ucv")
{
if (cvid==1)
{
con <-X_train_tumor
exp <-X_train_normal
}
else if (cvid==2)
{
con <-X_valid_tumor
exp <-X_valid_normal
}
m1    <- nrow(con)
m2    <- nrow(exp)
m     <- m1+m2
c0    <- sqrt(1/m1+1/m2)
G     <- ncol(con)  # Dimension
df    <- m-2        # Digree of freedom
x1    <- apply(con, 2, mean)
x2    <- apply(exp, 2, mean)
d     <- x2-x1  # mean difference #
s1    <- apply(con, 2, var)
s2    <- apply(exp, 2, var)
sp    <- ((m1-1)*s1+(m2-1)*s2)/(m1+m2-2)
sSq   <- (c0^2)*sp
muhat <- mean(d)
sigmaSq       <- array(0, G)
theta         <- array(0, G)
alpha <- 0.05
bandwidth <- array(0, 3)
if( bw == 'ucv' )
{
bandwidth[1] <- h.ucv(sSq, deriv.order=0)$h
bandwidth[2] <- h.ucv(sSq, deriv.order=1)$h
bandwidth[3] <- h.ucv(sSq, deriv.order=2)$h
}else{
bandwidth=c(0.6,0.6,0.6)
}
ljs   <- LJS(sSq,df)
opt   <- OPT(sSq,df)
smy   <- SMY(sSq,df)
vsh   <- VSH(sSq,df)
feb   <- fEB(sSq,df, bandwidth)
fes   <- fES(sSq,df, bandwidth)
# reb   <- GVmix(sSq,array(df,G))
Feb   <- FEB(sSq,df)
reb   <- sSq*0.9
tauSq.sSq     <- tauSqfn(sSq,d,muhat,alpha)
CI.sSq        <- CI.t(sSq,df,d,theta,sigmaSq,muhat,alpha)
CI.ljs        <- CI.est(ljs,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.opt        <- CI.est(opt,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.smy        <- CI.est(smy,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.vsh        <- CI.est(vsh,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.feb        <- CI.est(feb,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.fes        <- CI.est(fes,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.reb        <- CI.est(reb,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.Feb        <- CI.est(Feb,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
idvec=cbind(CI.sSq[,7],CI.ljs[,7],CI.opt[,7],CI.smy[,7],CI.vsh[,7],CI.feb[,7],CI.fes[,7],CI.reb[,7],CI.Feb[,7])
idvec
}
numSim=1
i=1
coloncancer <- read.table("./Textdata/colon_x.txt", quote="\"", comment.char="")
tissue      <- read.delim("./Textdata/colon_y.txt", header=FALSE) # 1: tumor,   2: normal
colon       <- t(coloncancer)
n1  <- length(tissue[tissue==1]) # n1=40
n2  <- length(tissue[tissue==2]) # n2=22
n   <- n1+n2
p   <- ncol(colon)  # number of Variables
## The function for calculating confidence intervals
##--------------------------------------------------------------------------------------------------------------------------
Crate1 <- array(0, c(numSim,9))
for(i in 1:numSim)
{
if( i%%1==0 ){
print(date())
print( paste( "number of simulation:", i, sep="") )
}
## Divide data set into Training and Validation Set
grp                <- tissue  # 1: tumor, 2: normal
CV                 <- c(rep(2,nrow(grp)))
train_tumr_ind     <- sample(seq(length(grp[grp==1])+1,nrow(grp),1), size=length(grp[grp==1])/2) # Sampling Traing set
train_norm_ind     <- sample(seq(1,length(grp[grp==2]),1), size=length(grp[grp==2])/2)           # Sampling Traing set
CV[train_norm_ind] <- 1
CV[train_tumr_ind] <- 1
Xdata=cbind(CV, grp, colon)
## CV - 1: Traing, 2: Validation;  grp - 1: tumor, 2: normal
X_train_tumor  <- Xdata[CV==1 & grp==1,3:(p+2)]
X_train_normal <- Xdata[CV==1 & grp==2,3:(p+2)]
X_valid_tumor  <- Xdata[CV==2 & grp==1,3:(p+2)]
X_valid_normal <- Xdata[CV==2 & grp==2,3:(p+2)]
idvec1=CVF(1, X_train_tumor, X_train_normal, X_valid_tumor, X_valid_normal, bw="ucv")
sSq1=idvec1[,1]
ljs1=idvec1[,2]
opt1=idvec1[,3]
smy1=idvec1[,4]
vsh1=idvec1[,5]
feb1=idvec1[,6]
fes1=idvec1[,7]
reb1=idvec1[,8]
Feb1=idvec1[,9]
idvec2=CVF(2, X_train_tumor, X_train_normal, X_valid_tumor, X_valid_normal, bw="ucv")
sSq2=idvec2[,1]
ljs2=idvec2[,2]
opt2=idvec2[,3]
smy2=idvec2[,4]
vsh2=idvec2[,5]
feb2=idvec2[,6]
fes2=idvec2[,7]
reb2=idvec2[,8]
Feb2=idvec2[,9]
idsSq=ifelse((sSq1+sSq2)==1,1,0)
idljs=ifelse((ljs1+ljs2)==1,1,0)
idopt=ifelse((opt1+opt2)==1,1,0)
idsmy=ifelse((smy1+smy2)==1,1,0)
idvsh=ifelse((vsh1+vsh2)==1,1,0)
idfeb=ifelse((feb1+feb2)==1,1,0)
idfes=ifelse((fes1+fes2)==1,1,0)
idreb=ifelse((reb1+reb2)==1,1,0)
idFeb=ifelse((Feb1+Feb2)==1,1,0)
Crate1[i,]=c(mean(idsSq),mean(idljs),mean(idopt),mean(idsmy),mean(idvsh),mean(idfeb),mean(idfes),mean(idreb),mean(idFeb))
}
{
if( i%%1==0 ){
print(date())
print( paste( "number of simulation:", i, sep="") )
}
grp                <- tissue  # 1: tumor, 2: normal
CV                 <- c(rep(2,nrow(grp)))
train_tumr_ind     <- sample(seq(length(grp[grp==1])+1,nrow(grp),1), size=length(grp[grp==1])/2) # Sampling Traing set
train_norm_ind     <- sample(seq(1,length(grp[grp==2]),1), size=length(grp[grp==2])/2)           # Sampling Traing set
CV[train_norm_ind] <- 1
CV[train_tumr_ind] <- 1
Xdata=cbind(CV, grp, colon)
## CV - 1: Traing, 2: Validation;  grp - 1: tumor, 2: normal
X_train_tumor  <- Xdata[CV==1 & grp==1,3:(p+2)]
X_train_normal <- Xdata[CV==1 & grp==2,3:(p+2)]
X_valid_tumor  <- Xdata[CV==2 & grp==1,3:(p+2)]
X_valid_normal <- Xdata[CV==2 & grp==2,3:(p+2)]
idvec1=CVF(1, X_train_tumor, X_train_normal, X_valid_tumor, X_valid_normal, bw="ucv")
sSq1=idvec1[,1]
ljs1=idvec1[,2]
opt1=idvec1[,3]
smy1=idvec1[,4]
vsh1=idvec1[,5]
feb1=idvec1[,6]
fes1=idvec1[,7]
reb1=idvec1[,8]
Feb1=idvec1[,9]
idvec2=CVF(2, X_train_tumor, X_train_normal, X_valid_tumor, X_valid_normal, bw="ucv")
sSq2=idvec2[,1]
ljs2=idvec2[,2]
opt2=idvec2[,3]
smy2=idvec2[,4]
vsh2=idvec2[,5]
feb2=idvec2[,6]
fes2=idvec2[,7]
reb2=idvec2[,8]
Feb2=idvec2[,9]
idsSq=ifelse((sSq1+sSq2)==1,1,0)
idljs=ifelse((ljs1+ljs2)==1,1,0)
idopt=ifelse((opt1+opt2)==1,1,0)
idsmy=ifelse((smy1+smy2)==1,1,0)
idvsh=ifelse((vsh1+vsh2)==1,1,0)
idfeb=ifelse((feb1+feb2)==1,1,0)
idfes=ifelse((fes1+fes2)==1,1,0)
idreb=ifelse((reb1+reb2)==1,1,0)
idFeb=ifelse((Feb1+Feb2)==1,1,0)
Crate1[i,]=c(mean(idsSq),mean(idljs),mean(idopt),mean(idsmy),mean(idvsh),mean(idfeb),mean(idfes),mean(idreb),mean(idFeb))
mean   <-round(apply(Crate1,2,mean),3)
std    <-round(apply(Crate1,2,sd  ),3)
table1 <- cbind(mean,std)
path        <- paste("./Data/")
path1       <- paste("./Figure/")
filenameR   <- paste(path,"Colon_Concordance_Rate.Rdata", sep="")
filenameT   <- paste(path,"Colon_Concordance_Table.Rdata", sep="")
save(Crate1, file = filenameR)
save(table1, file = filenameT)
figurename1 <- paste(path1,"Colon_Concordance.pdf",sep="")
pdf(figurename1,width=10,height=5)
boxplot(Crate1[,1],Crate1[,2],Crate1[,3],Crate1[,4],Crate1[,5],Crate1[,6],Crate1[,7],Crate1[,8],Crate1[,9],main="Rate of discordant pairs : Colon data", ylim=c(0.05,0.4), names=c("S^2","ELJS","TW","Smyth","Vash","f-EBV","f-EBVS","REBayes","F-EBV"),col=c("cyan3","blue","purple","green4","gold4", "brown","orange","green","red"),cex.lab=1.2,cex.axis=1.2,cex.main=1.5)
dev.off()
PLOT
.
?
)
PLOT=FALSE
source("Concordance_Leukemia.R")
concordance_leukemia(numSim=1, PLOT=FALSE, bw='defaults')
numSim=10
CVF <-function(cvid, X_train_AML, X_train_ALL, X_valid_AML, X_valid_ALL, bw="ucv")
{
if (cvid==1)
{
con <-X_train_AML
exp <-X_train_ALL
}
else if (cvid==2)
{
con <-X_valid_AML
exp <-X_valid_ALL
}
m1    <- nrow(con)
m2    <- nrow(exp)
m     <- m1+m2
c0    <- sqrt(1/m1+1/m2)
G     <- ncol(con)  # Dimension
df    <- m-2        # Digree of freedom
x1    <- apply(con, 2, mean)
x2    <- apply(exp, 2, mean)
d     <- x2-x1  # mean difference #
s1    <- apply(con, 2, var)
s2    <- apply(exp, 2, var)
sp    <- ((m1-1)*s1+(m2-1)*s2)/(m1+m2-2)
sSq   <- (c0^2)*sp
muhat <- mean(d)
sigmaSq       <- array(0, G)
theta         <- array(0, G)
alpha <- 0.05
if( bw == 'ucv' )
{
bandwidth[1] <- h.ucv(sSq, deriv.order=0)$h
bandwidth[2] <- h.ucv(sSq, deriv.order=1)$h
bandwidth[3] <- h.ucv(sSq, deriv.order=2)$h
}else{
bandwidth <- c(0.17,0.17,0.17)
}
ljs   <- LJS(sSq,df)
opt   <- OPT(sSq,df)
smy   <- SMY(sSq,df)
vsh   <- VSH(sSq,df)
feb   <- fEB(sSq,df, bandwidth)
fes   <- fES(sSq,df, bandwidth)
reb   <- GVmix(sSq,array(df,G))
Feb   <- FEB(sSq,df)
reb <- sSq
tauSq.sSq     <- tauSqfn(sSq,d,muhat,alpha)
CI.sSq        <- CI.t(sSq,df,d,theta,sigmaSq,muhat,alpha)
CI.ljs        <- CI.est(ljs,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.opt        <- CI.est(opt,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.smy        <- CI.est(smy,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.vsh        <- CI.est(vsh,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.feb        <- CI.est(feb,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.fes        <- CI.est(fes,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.reb        <- CI.est(reb,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
CI.Feb        <- CI.est(Feb,tauSq.sSq,d,theta,sigmaSq,muhat,alpha)
idvec=cbind(CI.sSq[,7],CI.ljs[,7],CI.opt[,7],CI.smy[,7],CI.vsh[,7],CI.feb[,7],CI.fes[,7],CI.reb[,7],CI.Feb[,7])
idvec
}
leukemiadata <- read.table("./Textdata/Leukemia_x.txt", quote="\"", comment.char="")
class        <- read.delim("./Textdata/Leukemia_y.txt", header=FALSE) # 1: AML,   2: ALL
leukemia     <- t(leukemiadata)
n1  <- length(class[class==1]) # n1=47
n2  <- length(class[class==2]) # n2=25
n   <- n1+n2
p   <- ncol(leukemia)  # number of Variables
Crate2 <- array(0, c(numSim,9))
for(i in 1:numSim)
{
if( i%%1==0 ){
print(date())
print( paste( "number of simulation:", i, sep="") )
}
## Divide data set into Training and Validation Set
grp               <- class  # 1: AML, 2: ALL
CV                <- c(rep(2,nrow(grp)))
train_AML_ind     <- sample(seq(length(grp[grp==1])+1,nrow(grp),1), size=length(grp[grp==1])/2) # Sampling Traing set
train_ALL_ind     <- sample(seq(1,length(grp[grp==2]),1), size=length(grp[grp==2])/2)           # Sampling Traing set
CV[train_AML_ind] <- 1
CV[train_ALL_ind] <- 1
Xdata=cbind(CV, grp, leukemia)
## CV - 1: Traing, 2: Validation;  grp - 1: AML, 2: ALL
X_train_AML  <- Xdata[CV==1 & grp==1,3:(p+2)]
X_train_ALL  <- Xdata[CV==1 & grp==2,3:(p+2)]
X_valid_AML  <- Xdata[CV==2 & grp==1,3:(p+2)]
X_valid_ALL  <- Xdata[CV==2 & grp==2,3:(p+2)]
idvec1=CVF(1, X_train_AML, X_train_ALL, X_valid_AML, X_valid_ALL, bw="ucv")
sSq1=idvec1[,1]
ljs1=idvec1[,2]
opt1=idvec1[,3]
smy1=idvec1[,4]
vsh1=idvec1[,5]
feb1=idvec1[,6]
fes1=idvec1[,7]
reb1=idvec1[,8]
Feb1=idvec1[,9]
idvec2=CVF(2, X_train_AML, X_train_ALL, X_valid_AML, X_valid_ALL, bw="ucv")
sSq2=idvec2[,1]
ljs2=idvec2[,2]
opt2=idvec2[,3]
smy2=idvec2[,4]
vsh2=idvec2[,5]
feb2=idvec2[,6]
fes2=idvec2[,7]
reb2=idvec2[,8]
Feb2=idvec2[,9]
idsSq=ifelse((sSq1+sSq2)==1,1,0)
idljs=ifelse((ljs1+ljs2)==1,1,0)
idopt=ifelse((opt1+opt2)==1,1,0)
idsmy=ifelse((smy1+smy2)==1,1,0)
idvsh=ifelse((vsh1+vsh2)==1,1,0)
idfeb=ifelse((feb1+feb2)==1,1,0)
idfes=ifelse((fes1+fes2)==1,1,0)
idreb=ifelse((reb1+reb2)==1,1,0)
idFeb=ifelse((Feb1+Feb2)==1,1,0)
Crate2[i,]=c(mean(idsSq),mean(idljs),mean(idopt),mean(idsmy),mean(idvsh),mean(idfeb),mean(idfes),mean(idreb),mean(idFeb))
}
idvec1=CVF(1, X_train_AML, X_train_ALL, X_valid_AML, X_valid_ALL, bw="ucv")
Crate2
